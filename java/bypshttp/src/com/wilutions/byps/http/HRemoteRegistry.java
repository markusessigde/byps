package com.wilutions.byps.http;

import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.wilutions.byps.BApiDescriptor;
import com.wilutions.byps.BClient;
import com.wilutions.byps.BException;
import com.wilutions.byps.BExceptionC;
import com.wilutions.byps.BRemote;
import com.wilutions.byps.BServerRegistry;
import com.wilutions.byps.BSyncResult;
import com.wilutions.byps.BTargetId;
import com.wilutions.byps.BTransport;
import com.wilutions.byps.BWire;
import com.wilutions.byps.RemoteException;

public abstract class HRemoteRegistry implements BServerRegistry {
	
	private final ConcurrentHashMap<Integer, BClient> clientMap = new ConcurrentHashMap<Integer, BClient>();
	private final Executor tpool = Executors.newCachedThreadPool();
	private final HConfig config;
	private final Log log = LogFactory.getLog(HRemoteRegistry.class);
	
	public HRemoteRegistry(HConfig config) {
		this.config = config;
	}
	
	@Override
	public ArrayList<BClient> getForwardClientsToOtherServers() throws RemoteException {
		ArrayList<BClient> clients = new ArrayList<BClient>();
		Collection<Integer> serverIds = config.getServerIds();
		for (Integer serverId : serverIds) {
			if (serverId == config.getMyServerId()) continue;
			BClient client = getForwardClient(serverId);
			clients.add(client);
		}
		return clients;
	}
	
	@Override
	public BClient getForwardClientIfForeignTargetId(BTargetId targetId) throws RemoteException {
		if (log.isDebugEnabled()) log.debug("getForwardClientIfForeignTargetId(" + targetId);
		BClient client = null;
		int serverId = HTargetIdFactory.getServerIdFromTargetId(targetId); 
		if (serverId != config.getMyServerId()) {    			
			client = getForwardClient(serverId);
			if (client == null) {
				throw new BException(BExceptionC.INTERNAL, "Cannot reach server for targetId=" + targetId +", missing url for serverId=" + serverId + ", in configuration."); 
			}
		}
		if (log.isDebugEnabled()) log.debug(")getForwardClientIfForeignTargetId=" + client);
		return client;
	}

	protected BClient getForwardClient(int serverId) throws RemoteException {
		BClient client = clientMap.get(serverId);
		if (client == null) {
			String url = config.getServerUrl(serverId);
			if (url == null || url.length() == 0) {
				return null; 
			}
			if (log.isDebugEnabled()) log.debug("createForwardClientToOtherServer...");
			
			try {
  			BWire wire = new HWireClient(url, 0, 120, null, tpool);
  			BTransport transport = new BTransport(getApiDescriptor(), wire, null);
  			client = createForwardClientToOtherServer(transport);

  			BSyncResult<Boolean> syncResult = new BSyncResult<Boolean>();
        client.start(syncResult);
        syncResult.getResult();
			}
			catch (RemoteException e) {
			  BWire wire = new BWire(BWire.FLAG_DEFAULT);
        BTransport transport = new BTransport(getApiDescriptor(), wire, null);
        client = createForwardClientToOtherServer(transport);
			}
			
			if (log.isDebugEnabled()) log.debug("createForwardClientToOtherServer OK, client=" + client);
			clientMap.put(serverId, client);
		}
		return client;
	}

	@Override
	public BRemote getRemote(BTargetId targetId, int remoteId) throws RemoteException {
		if (log.isDebugEnabled()) log.debug("getRemote(targetId=" + targetId + ", remoteId=" + remoteId);
		BRemote remote = null;

		// Is targetId generated by me?
		int serverId = HTargetIdFactory.getServerIdFromTargetId(targetId); 
		if (log.isDebugEnabled()) log.debug("serverId=" + serverId);
		if (serverId != config.getMyServerId()) {
			
			if (log.isDebugEnabled()) log.debug("it is a serverId of another server");
			
			// Get/create a connection from this server to the other server
			final BClient client = getForwardClientIfForeignTargetId(targetId);
			
			// Clone the transport to the other server.
			// The cloned transport has the same connection (BWire) as the server-to-server transport,
			// but it acts for the passed targetId.
			final BTransport forwardTransport = new BTransport(client.transport, targetId);
			
			// Create a client object for the forward transport.
			BClient forwardClient = createForwardClientToOtherServer(forwardTransport);
			
			// Return the requested BRemote interface
			remote = forwardClient.getStub(remoteId);
		}
		else {
			if (log.isDebugEnabled()) log.debug("it is my serverId");
			
			// Get client session
			HSession sess = HSession.getSession(targetId);
			if (sess == null) {
				throw new BException(BExceptionC.CLIENT_DIED, "Client is not connected, targetId=" + targetId); 
			}
			
			remote = sess.getClientR().getStub(remoteId);
		}
		if (log.isDebugEnabled()) log.debug(")getRemote=" + remote);
		return remote;
	}

	protected abstract BClient createForwardClientToOtherServer(BTransport transport) throws BException;
	protected abstract BApiDescriptor getApiDescriptor();
}
